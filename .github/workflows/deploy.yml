name: Deploy via SSH (Hostinger split app/public)

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Prepare SSH (decode key safely, trust host, quick auth test)
      - name: Prepare SSH
        shell: bash
        env:
          SSH_KEY_B64: ${{ secrets.SSH_KEY_B64 }}
          SSH_HOST:    ${{ secrets.SSH_HOST }}
          SSH_PORT:    ${{ secrets.SSH_PORT }}
          SSH_USER:    ${{ secrets.SSH_USER }}
        run: |
          set -e
          mkdir -p ~/.ssh
          echo "$SSH_KEY_B64" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          PORT="${SSH_PORT:-22}"
          ssh-keyscan -p "$PORT" "$SSH_HOST" >> ~/.ssh/known_hosts 2>/dev/null
          # sanity: ensure the key is readable by ssh
          ssh -o BatchMode=yes -p "$PORT" "$SSH_USER@$SSH_HOST" "echo ssh-ok"

      # --- Build Vite (if you have package.json)
      - name: Build assets (Vite)
        shell: bash
        run: |
          if [ -f package.json ]; then
            npm ci || npm i
            npm run build || echo "No build script; skipping"
          else
            echo "No package.json; skipping Vite build"
          fi

      # --- Create app bundle (exclude heavy/runtime stuff)
      - name: Create app bundle
        shell: bash
        run: |
          tar --exclude-vcs \
              --exclude='./node_modules' \
              --exclude='./vendor' \
              --exclude='./storage/logs/*' \
              --exclude='./storage/framework/cache/*' \
              --exclude='./public/build' \
              -czf _app.tgz .

      # --- Create public bundle (only built assets / special index)
      - name: Create public bundle
        shell: bash
        run: |
          mkdir -p _pub
          [ -d public/build ] && cp -R public/build _pub/ || true
          # If you keep a Hostinger-specific index file, include it:
          [ -f public/index.hostinger.php ] && cp public/index.hostinger.php _pub/ || true
          tar -czf _pub.tgz -C _pub .

      # --- Upload bundles to the server
      - name: Upload bundles to server
        shell: bash
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          set -e
          PORT="${SSH_PORT:-22}"
          ssh -p "$PORT" "$SSH_USER@$SSH_HOST" "mkdir -p ~/deploy_tmp"
          scp -P "$PORT" _app.tgz _pub.tgz "$SSH_USER@$SSH_HOST:~/deploy_tmp/"

      # --- Extract & deploy, then composer+artisan on the server
      - name: Deploy on server (composer + artisan + publish public)
        shell: bash
        env:
          SSH_HOST:    ${{ secrets.SSH_HOST }}
          SSH_PORT:    ${{ secrets.SSH_PORT }}
          SSH_USER:    ${{ secrets.SSH_USER }}
          APP_PATH:    ${{ secrets.APP_PATH }}
          PUBLIC_PATH: ${{ secrets.PUBLIC_PATH }}
        run: |
          set -e
          PORT="${SSH_PORT:-22}"
          ssh -p "$PORT" "$SSH_USER@$SSH_HOST" "
            set -e
            mkdir -p \"$APP_PATH\" \"$PUBLIC_PATH\"
            cd ~/deploy_tmp
            tar -xzf _app.tgz -C \"$APP_PATH\"
            tar -xzf _pub.tgz -C \"$PUBLIC_PATH\"
            rm -f _app.tgz _pub.tgz

            cd \"$APP_PATH\"

            # Composer (if available on Hostinger)
            if command -v composer >/dev/null 2>&1; then
              composer install --no-dev --optimize-autoloader
            else
              echo 'Composer not found on server; skipping.'
            fi

            # Laravel maintenance
            if command -v php >/dev/null 2>&1; then
              php artisan migrate --force || true
              php artisan storage:link || true
              php artisan optimize:clear || true
              php artisan optimize || true
            fi

            echo 'Deploy finished.'
          "
